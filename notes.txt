R 
	practical issues in statistical computing
	programming in R, reading data into R, accessing R packages, writing R functions, debugging, and organizing and commenting R code
	 
	 
	Video 1 - Overview of R, R data types and objects, reading and writing data
	Video 2 - Control structures, functions, scoping rules, dates and times
	Video 3 - Loop functions, debugging tools
	Video 4 - Simulation, code profiling
	
	https://swirlstats.com/
	
	
	logical operators 
		The `<` and `>=` symbols in these examples are called 'logical operators'. Other logical operators include `>`, `<=`, `==` for exact equality, and `!=` for inequality.
				| If we have two logical expressions, A and B, we can ask whether at least one is TRUE with A | B (logical 'or' a.k.a.
				| 'union') or whether they are both TRUE with A & B (logical 'and' a.k.a. 'intersection'). Lastly, !A is the negation of
				| A and is TRUE when A is FALSE and vice versa.
	
	ls()
	dir()
	getwd()
	read.csv(<filename>)
	ls()
	myfunction <- function() { x <- rnorm(100) }
	source(<codefile.r>)
	
	<- = assignment operator
	print(x)     ## Explicit printing
	x 			 ## auto-printing occurs or direct value print
	[1] indicates that x is a vector and 5 is the first elelment.
		| Index vectors come in four different flavors -- logical vectors, vectors of positive integers, vectors of negative
		| integers, and vectors of character strings
	
	
	:  operator is used to create integer sequence
	x <- 1:20
	
	
	everything in R is object
		5 basic objects  -
			character
			numeric (real numbers)
			integer
			complex  
			logical
		
		most basic is vector
			vector of chars
			vector of numeric
			contains one type of single object namely chars, numbers, integer
			exception on list where elelment can  be of different type
			
		vector(type of object, len)
	Numbers 
		Inf is infinity
		1L is an integer, whereas 1 is numbers
		NaN - Not a number or missing value e.g. 0/0
		
	Attributes
		common types
			names, dimnames 
			dimensions (number of rows, number of columns)
			class
			length
			other user defined attributes/metadata
		use attributes() to access attributes of a class
	
	
	c()
		creating vectors
		
		x <- c(0.1, 0.2)
		b <- c(TRUE, FALSE, TRUE)
		b1 <- c(T, F, F)
		s <- c("x", "y")
		i <- c(2+0L, 2+4L)
		sq <- 1:20

 	    vector("character", 10)
		
		mixing objects
			least denomination
			z <- c(0.9, "a")			##characters
			z <- c(F, 1)				## numeric
			z <- c("b", F)				##character
				coercion occurs so that every element in the vector is of same class
			
			explicit coercion
				x <- 0:20
				as.logical(x)
				as.numeric(x)
				as.character(x)
				## nonsensical coercion results in NAS
		
					
	lists
		x <- list(1, "a", "xyz", T, 0L, 1i + 4i, 5+5L, 0:20)
		x						## index is always 1 not 0 unlike other programming
		x[6]					##explicit printing of element
		x[1]; x[2]				##explicit multi element printing on same line
		
		
		
		
	Matrices 
		special type of vector
		creation - 
			using matrix function
				m <- matrix(nrow = 3, ncol = 2)
				dim(m)
					[1] 3 2			## first number is rows, second one is column
				attributes(m)
				
				they are constructed by columns, and populated as below 
					matrix(1:6, nrow=3, ncol=2)			## good
					matrix(1:8, nrow=3, ncol=2)			## with warning
					matrix(1:8, nrow=3, ncol=3)			## with warning and restarts it from beginning.
			using dim	
				m<-1:10
				dim(m) <- c(5,2)			## take the vector and assign to underline dimensions
			using rbind, cbind
				x <- 1:5
				y <- 10:14
				cbind(x, y)
				rbind(x, y)
	
	Factors 
		special type of factor 
		aka enumerations i.e. male and female
		represent categorical data
		used in modelling functions 
		
		f <- factor(c("yes", "no", "yes", "yes", "no"))
		table(f)
		unclass(f)

		f <- factor(c("yes", "no", "yes", "yes", "no"), levels = ("yes", "no"))
		table(f)
		unclass(f)
		

	Missing Values
		is.na(<list>, <factor>, <vector>)
		is.nan(<list>, <factor>, <vector>)
		


	Dataframe -
		to store tabular data
		special attribute row.names
		created by calling read.table() read.csv()
		
		df <-  data.frame(foo = 1:4, bar = c(T, T, F, F), ff = 5:8)
		nrow(df)
		ncol(df)


	Names 
		by default no names to vector objects 
		to assign names
		names(x) <- c("col1", "col2","col3")
		
		trial and error
			assign less names. 
		list, matrices can have names. 
			list (a =1, b = 1, c=1) 
			matrix(
		
		vect2 <- c(11, 2, NA)
		names(vect2) <- c("foo", "bar", "norf")
		 identical(vect, vect2)
		 
		 vect["bar"]
		 vect[c("foo", "bar")]
		
		 x[c(-2, -10)]
		 x[-c(2, 10)]


	Reading Data
		read.table - most common function 
			args: file, header, sep, colClasses: vector, nrows, comment.char, skip, stringAsFactors 
			data <- read.table('example.txt')
			for larger datasets - 
				help page for hints
				rough calculation on how much require. 
				comment.char=""
				defibe colClasses in args to reduce time to automatically identify atomic class
				nRows (use wc to count rows in Unix) 
				Know thy system - 
					available memory, other apps in use, os x86/x64
				calcuting memory 
					15,00,000 rows and 120 cols containing all numeric data
					rows x cols x 8 bytes/numeric
		read.csv  
			identifical to read.table with default sep as ','
		readLines
		source for reading source r file 
		dget for reading source r file 
		load for workspaces
		unseralize for reading single R objects in binary file
		
	writing data
		write.table
		writeLines
		textual format: editbale,useful for versioning, unix philosphy, not space efficient
			dump
			dput
		save
		serialize

		
		
	data sampling 
		standard normal distribution with y <- rnorm(1000).
		create a vector containing 1000 NAs with z <- rep(NA, 1000).
		
		| Finally, let's select 100 elements at random from these 2000 values (combining y and z) such that we don't know how
		| many NAs we'll wind up with or what positions they'll occupy in our final vector -- my_data <- sample(c(y, z), 100).

		my_data <- sample(c(y, z), 100)

	* Take nothing but results. Leave nothing but assumptions. That sounds like 'Take nothing but pictures. Leave nothing but footprints.'


	


	#Coursera only 
	SWIRL (swirlstats.com) 
		short for Statistics with Interactive R Learning
		
		
	Books
		Software of data analysis
		programming with data
		use R!
